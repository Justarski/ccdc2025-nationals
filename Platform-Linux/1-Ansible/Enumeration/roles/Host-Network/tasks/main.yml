##
# Usage: Logs Network connections, Actively listening, established and raw.
#
# Initially written by a Tired Matthew Harper
# Modified, tested and verified by Chris Morales - Ubuntu, Debian, RHEL
##

---
  - name: Gather Host Networking Information
    ansible.builtin.shell: |
      echo "[!] Base Networking [!]"
      ip a
    register: network_base
    ignore_errors : true

  - name: Gather-Listening-Ports
    ansible.builtin.shell: |
      echo "[!] Processes Currently Listening for Connections (ss) [!]"
      ss -tulpnws
      echo "\n[!] Processes Currently Listening for Connections (lsof - TCP) [!]"
      lsof -i -s TCP:LISTEN
    register: network_listen

  - name: Gather-Outbound-Ports
    ansible.builtin.shell: |
      echo "[!] Processes Currently Established/Establishing Connections (ss) [!]"
      ss -tupnws
      echo "\n[!] Processes Currently Established/Establishing Connections (lsof - TCP) [!]"
      lsof -i -s TCP:ESTABLISHED
    register: network_established
    ignore_errors : true
  
  - name: Gather-Outbound-Ports
    ansible.builtin.shell: |
      echo "[!] Processes Currently Established/Establishing RAW/PCAP sessions [!]"
      lsof | grep -i -E 'raw|pcap'
      lsof | grep /proc/sys/net/ipv4
    register: network_raw
    ignore_errors : true

  - name: Gather-Network-Info
    ansible.builtin.shell: |
      echo "[!] Network Namespaces [!]"
      ip netns list
      echo "[!] Interface IPs [!]"
      ip -br address
      echo "[!] Interface MACSs [!]"
      ip -br link
      echo "[!] Routes [!]"
      ip route
    register: net_state
    ignore_errors : true

  - name: Gather-Network-Info
    ansible.builtin.shell: |
      echo "[!] NSSWitch [!]"
      cat /etc/nsswitch.conf | grep -Ev '#'
      echo "[!] Hosts File [!]"
      cat /etc/hosts | grep -Ev '#'
      echo "[!] resolv Conf [!]"
      cat /etc/resolv.conf | grep -Ev '#'
    ignore_errors : true
    register: net_conf


  - name: Gather-Firewall-Rules
    ansible.builtin.shell: |
      echo "[!] Firewalld Status and Rules [!]"
      if command -v firewall-cmd >/dev/null 2>&1; then
        firewall-cmd --state
        firewall-cmd --list-all
        firewall-cmd --list-all-zones
      else
        echo "firewalld not found."
      fi

      echo "\n[!] iptables Rules [!]"
      if command -v iptables >/dev/null 2>&1; then
        iptables -L -v -n
      else
        echo "iptables not found."
      fi

      echo "\n[!] ip6tables Rules [!]"
      if command -v ip6tables >/dev/null 2>&1; then
        ip6tables -L -v -n
      else
        echo "ip6tables not found."
      fi

      echo "\n[!] nftables Rules [!]"
      if command -v nft >/dev/null 2>&1; then
        nft list ruleset
      else
        echo "nftables not found."
      fi
    register: net_firewall
    ignore_errors: true
  


  - name: Combine network data into one report
    set_fact:
      full_network_report: |
        ----------------------------------------------------------------------

        {{ network_base.stdout }}

        ----------------------------------------------------------------------

        {{ network_listen.stdout }}

        ----------------------------------------------------------------------

        {{ network_established.stdout }}

        ----------------------------------------------------------------------

        {{ network_raw.stdout }}

        ----------------------------------------------------------------------
        
        {{ net_state.stdout }}
        
        ----------------------------------------------------------------------

        {{ net_conf.stdout }}

        ----------------------------------------------------------------------

        {{ net_firewall.stdout }}

  # - name: Ensure the local target directory is made
  #   file:
  #     path: "{{ results_dir }}/networking"
  #     state: directory
  #   delegate_to: localhost

  # - name: Save results to the controller
  #   ansible.builtin.copy:
  #     content: "{{ full_network_report }}"
  #     dest: "{{ results_dir }}/networking/{{ ansible_hostname }}-{{ inventory_hostname }}-networking.txt"
  #     mode: '0644'
  #   delegate_to: localhost

  - name: Ensure the local target directory is made
    file:
      path: "{{ results_dir }}/{{ ansible_hostname }}-{{ inventory_hostname }}/host_network/"
      state: directory
    delegate_to: localhost

  - name: Save results to the controller
    ansible.builtin.copy:
      content: "{{ full_network_report }}"
      #dest: "{{ results_dir }}/services/{{ ansible_hostname }}-{{ inventory_hostname }}-services.txt"
      dest: "{{ results_dir }}/{{ ansible_hostname }}-{{ inventory_hostname }}/host_network/{{ timestamp }}"
      mode: '0644'
    delegate_to: localhost
    retries: 3
