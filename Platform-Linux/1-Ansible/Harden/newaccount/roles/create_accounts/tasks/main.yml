---
- name: Gather Group Info
  ansible.builtin.getent:
    database: group
  register: group_info

- name: Use sudo if it exists
  ansible.builtin.set_fact:
    admin_group: sudo
  when: "'sudo' in group_info.ansible_facts.getent_group"

- name: Use wheel if sudo is not available but wheel is
  ansible.builtin.set_fact:
    admin_group: wheel
  when: "'sudo' not in group_info.ansible_facts.getent_group and 'wheel' in group_info.ansible_facts.getent_group"

- name: Fallback to sudo if neither exists (paranoid fallback)
  ansible.builtin.set_fact:
    admin_group: sudo
  when: "'sudo' not in group_info.ansible_facts.getent_group and 'wheel' not in group_info.ansible_facts.getent_group"

- name: Ensure user group will exist
  ansible.builtin.group:
    name: "{{ item }}"
  loop: "{{ new_accounts }}"

- name: Create the new accounts
  ansible.builtin.user:
    name: "{{ item }}"
    password: "{{ accounts_map[item].hash }}"
    group: "{{ item }}"
    groups: "{{ admin_group }}"
    append: yes
    shell: /bin/bash
  loop: "{{ new_accounts }}"

- name: Save the passwords to a file
  delegate_to: localhost
  ansible.builtin.lineinfile:
    path: "{{ passwords_file }}"
    line: "{{ item }},{{ accounts_map[item].pwd }}"
    create: yes
    mode: '0644'
  loop: "{{ new_accounts }}"
